{"version":3,"sources":["services/auth.service.js","components/login.component.js","components/register.component.js","services/auth-header.js","services/user.service.js","components/profile.component.js","components/compose.component.js","App.js","serviceWorker.js","index.js"],"names":["email","full_name","password","axios","post","API_URL","then","response","data","accessToken","localStorage","setItem","JSON","stringify","removeItem","parse","getItem","required","value","className","role","Login","props","form","useRef","checkBtn","useState","setEmail","setPassword","loading","setLoading","message","setMessage","useEffect","AuthService","history","push","window","location","reload","src","alt","onSubmit","e","preventDefault","current","validateAll","context","_errors","length","success","error","resMessage","toString","ref","htmlFor","type","name","onChange","target","validations","disabled","style","display","validEmail","isEmail","vpassword","vfullName","Register","setfull_name","successful","setSuccessful","onClick","authHeader","user","get","headers","sender","reciver","subject","id","delete","Profile","currentUser","setCurrentUser","recivedMesages","setrecivedMesages","sentMesages","setsentMesages","isSent","setisSent","messageForDelete","setmessageForDelete","noDataToShow","setNoDataToShow","isMessagesEmpty","arr","userService","deleteMessage","a","newsentMesages","data-on","data-off","scope","map","key","data-toggle","data-target","tabIndex","aria-labelledby","aria-hidden","data-dismiss","aria-label","delay","ms","Promise","resolve","setTimeout","Compose","allUsers","setallUsers","emailMessage","setemailMessage","undefined","sendTo","setsendTo","setSubject","setUser","Users","getAllUsersAndMine","handleSendMessage","parseInt","console","log","App","to","href","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.1710a842.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"/auth/\";\r\n\r\nconst login = (email, password) => {\r\n    return axios.post(API_URL + \"login\", {\r\n        email,\r\n        password\r\n      })\r\n      .then(response => {\r\n        if (response.data.accessToken) {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        }\r\n\r\n        return response.data;\r\n      });\r\n}\r\n  \r\nconst logout = () => {\r\n    localStorage.removeItem(\"user\");\r\n  };\r\n  \r\nconst register = (email, full_name, password) => {\r\n    return axios.post(API_URL + \"register\", {\r\n        email,\r\n        full_name,\r\n        password\r\n        });\r\n} \r\nconst getCurrentUser = () => {\r\n    return JSON.parse(localStorage.getItem(\"user\"));\r\n  };\r\n\r\n  export default {\r\n    register,\r\n    login,\r\n    logout,\r\n    getCurrentUser,\r\n  };\r\n  \r\n","import React, { useState, useRef,useEffect } from \"react\";\r\nimport Form from 'react-validation/build/form';\r\nimport Input from 'react-validation/build/input';\r\nimport CheckButton from \"react-validation/build/button\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nconst required = (value) => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst Login = (props) => {\r\n\r\n  const form = useRef();\r\n  const checkBtn = useRef();\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const user = AuthService.getCurrentUser();\r\n    if(user){\r\n      props.history.push(\"/profile\");\r\n      window.location.reload();\r\n    }\r\n  });\r\n\r\n  const onChaneEmail = (e) => {\r\n    const email = e.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const onChangePassword = (e) => {\r\n    const password = e.target.value;\r\n    setPassword(password);\r\n  };\r\n  \r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n\r\n    setMessage(\"\");\r\n    setLoading(true);\r\n\r\n    form.current.validateAll();\r\n\r\n    if (checkBtn.current.context._errors.length === 0) {\r\n      AuthService.login(email, password).then(\r\n        (data) => {\r\n        if(data.success){\r\n            props.history.push(\"/profile\");\r\n            window.location.reload();\r\n        }else{\r\n          setMessage(data.error);\r\n          setLoading(false);\r\n        }\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          setLoading(false);\r\n          setMessage(resMessage);\r\n        }\r\n      );\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-md-12\">\r\n      <div className=\"card card-container\">\r\n        <img\r\n          src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n          alt=\"profile-img\"\r\n          className=\"profile-img-card\"\r\n        />\r\n\r\n        <Form onSubmit={handleLogin} ref={form}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email\">Email</label>\r\n            <Input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={onChaneEmail}\r\n              validations={[required]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <Input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={onChangePassword}\r\n              validations={[required]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <button className=\"btn btn-primary btn-block\" disabled={loading}>\r\n              {loading && (\r\n                <span className=\"spinner-border spinner-border-sm\"></span>\r\n              )}\r\n              <span>Sign In</span>\r\n            </button>\r\n          </div>\r\n\r\n          {message && (\r\n            <div className=\"form-group\">\r\n              <div className=\"alert alert-danger\" role=\"alert\">\r\n                {message}\r\n              </div>\r\n            </div>\r\n          )}\r\n          <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport { isEmail } from \"validator\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nconst required = (value) => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst validEmail = (value) => {\r\n  if (!isEmail(value)) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This is not a valid email.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nconst vpassword = (value) => {\r\n  if (value.length < 4 || value.length > 40) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        The password must be between 5 and 40 characters.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst vfullName = (value) => {\r\n    if (!value) {\r\n      return (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n          Full Name is required\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\nconst Register = (props) => {\r\n  const form = useRef();\r\n  const checkBtn = useRef();\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [full_name, setfull_name] = useState(\"\");\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const user = AuthService.getCurrentUser();\r\n    if(user){\r\n      props.history.push(\"/profile\");\r\n      window.location.reload();\r\n    }\r\n  });\r\n\r\n  const onChangeEmail = (e) => {\r\n    const email = e.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const onChangePassword = (e) => {\r\n    const password = e.target.value;\r\n    setPassword(password);\r\n  };\r\n\r\n  const onChangeFullName = (e) => {\r\n    const full_name = e.target.value;\r\n    setfull_name(full_name);\r\n  };\r\n\r\n  const handleRegister = (e) => {\r\n    e.preventDefault();\r\n\r\n    setMessage(\"\");\r\n    setSuccessful(false);\r\n\r\n    form.current.validateAll();\r\n\r\n    if (checkBtn.current.context._errors.length === 0) {\r\n      AuthService.register(email,full_name, password).then(\r\n        (response) => {\r\n            if(response.data.success){\r\n                setMessage(\"Account successfully created, now you can sign in\");\r\n                setSuccessful(true);\r\n            }else{\r\n                setMessage(response.data.error);\r\n                setSuccessful(false);\r\n            }\r\n            \r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-md-12\">\r\n      <div className=\"card card-container\">\r\n        <img\r\n          src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n          alt=\"profile-img\"\r\n          className=\"profile-img-card\"\r\n        />\r\n\r\n        <Form onSubmit={handleRegister} ref={form}>\r\n          {!successful && (\r\n            <div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"email\">Email</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  onChange={onChangeEmail}\r\n                  validations={[required, validEmail]}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"password\">Full Name</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"full_name\"\r\n                  value={full_name}\r\n                  onChange={onChangeFullName}\r\n                  validations={[required, vfullName]}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"password\">Password</label>\r\n                <Input\r\n                  type=\"password\"\r\n                  className=\"form-control\"\r\n                  name=\"password\"\r\n                  value={password}\r\n                  onChange={onChangePassword}\r\n                  validations={[required, vpassword]}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <button className=\"btn btn-primary btn-block\">Sign Up</button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {message && (\r\n            <div className=\"form-group\">\r\n              <div\r\n                className={ successful ? \"alert alert-success\" : \"alert alert-danger\" }\r\n                role=\"alert\"\r\n              >\r\n                {message}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {successful && (\r\n              <div className=\"form-group\">\r\n                  <button className=\"btn btn-success btn-block\" onClick={()=>{\r\n                      props.history.push(\"/\");\r\n                      window.location.reload();\r\n                  }}>Go To Sign In</button>\r\n              </div>\r\n          )}\r\n          <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;","export default function authHeader() {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n  \r\n    if (user && user.accessToken) {\r\n      return { 'x-access-token': user.accessToken ,'Content-Type' : 'application/json'};\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n\r\n  ","import axios from 'axios';\r\nimport authHeader from './auth-header';\r\n\r\nconst API_URL = '/messages/';\r\n\r\nconst getAllRecivedMessages = () => {\r\n    return axios.get(API_URL + 'message/', { headers: authHeader()});\r\n}\r\n  \r\nconst getAllSentMessages = () => {\r\n    return axios.get(API_URL + 'message/?filter=sent', { headers: authHeader()});\r\n}\r\n\r\nconst getAllUsers = () => {\r\n    return axios.get(API_URL + 'users/', { headers: authHeader()});\r\n}\r\n  \r\nconst composeMessage = (sender,reciver,message,subject) => {\r\n    return axios.post(API_URL + 'message/',{\r\n        sender: sender,\r\n        reciver: reciver,\r\n        message: message,\r\n        subject: subject\r\n        }, { headers: authHeader()});\r\n}\r\n  \r\nconst deleteMessage = (id) => {\r\n    return axios.delete(API_URL + `message/${id}`, { headers: authHeader()});\r\n}\r\n\r\nexport default {\r\n    getAllRecivedMessages,\r\n    getAllSentMessages,\r\n    getAllUsers,\r\n    composeMessage,\r\n    deleteMessage\r\n}\r\n\r\n  \r\n","import React, { useState, useEffect } from \"react\";\r\nimport AuthService from \"../services/auth.service\";\r\nimport userService from \"../services/user.service\"\r\nimport { BsX } from \"react-icons/bs\";\r\n\r\nconst Profile = (props) => {\r\n\r\nconst [currentUser, setCurrentUser] = useState({});\r\nconst [recivedMesages, setrecivedMesages] = useState([]);\r\nconst [sentMesages, setsentMesages] = useState([]);\r\nconst [loading, setLoading] = useState(false);\r\nconst [isSent, setisSent] = useState(false);\r\nconst [messageForDelete, setmessageForDelete] = useState(\"\");\r\nconst [noDataToShow,setNoDataToShow] = useState(false);\r\n\r\n    const isMessagesEmpty = (arr) =>{\r\n        return  (arr.length === 0) ? setNoDataToShow(true) : setNoDataToShow(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        const user = AuthService.getCurrentUser();\r\n        if (user) {\r\n            setCurrentUser(user);\r\n        }\r\n        if(isSent){\r\n            userService.getAllSentMessages().then(response =>{\r\n                setsentMesages(response.data.response);\r\n                setLoading(false);\r\n                isMessagesEmpty(response.data.response)\r\n            });\r\n        }else{           \r\n            userService.getAllRecivedMessages().then(response =>{\r\n                setrecivedMesages(response.data.response);\r\n                setLoading(false);\r\n                isMessagesEmpty(response.data.response);\r\n            });\r\n        }        \r\n    }, [isSent]);\r\n\r\n    const  deleteMessage = async () =>{\r\n        if(isSent){\r\n            let response = await userService.deleteMessage(messageForDelete);\r\n            let newsentMesages = await userService.getAllSentMessages();\r\n            setsentMesages(newsentMesages.data.response);\r\n            isMessagesEmpty(newsentMesages.data.response);\r\n            setLoading(false);\r\n            setmessageForDelete(\"\");\r\n        }else{\r\n            let response = await userService.deleteMessage(messageForDelete);\r\n            let newsentMesages = await userService.getAllRecivedMessages();\r\n            setrecivedMesages(newsentMesages.data.response);\r\n            isMessagesEmpty(newsentMesages.data.response);\r\n            setLoading(false);\r\n            setmessageForDelete(\"\");\r\n        }\r\n    }\r\n\r\n    const  sendToComposeMessage = () =>{\r\n        props.history.push(\"/compose\");\r\n        window.location.reload();\r\n    }\r\n  \r\n\r\n  return (\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            <div className=\"col-sm-3\">\r\n            <strong>Hello {currentUser.full_name}</strong>\r\n            <label className=\"switch switch-yes-no\">\r\n                <input onClick={()=>setisSent(!isSent)} className=\"switch-input\" type=\"checkbox\" />\r\n                <span className=\"switch-label\" data-on=\"Sent\" data-off=\"Inbox\"></span> \r\n                <span className=\"switch-handle\"></span> \r\n            </label>\r\n            </div>\r\n            <div className=\"col-sm-9\">\r\n            {noDataToShow ? \r\n                (\r\n                    <div className=\"card text-center\">\r\n                        {isSent ? (\r\n                        <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">\r\n                            There aren't any sent messages yet.\r\n                        </h5>\r\n                        <button className=\"btn btn-primary\" onClick={sendToComposeMessage}>Compose Message</button>\r\n                        </div>\r\n                        ):(\r\n                        <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">\r\n                            There are no messages yet.\r\n                        </h5>\r\n                        </div>\r\n                        )}\r\n                    </div>\r\n                ) : (\r\n                <table className=\"table\">\r\n                <thead className=\"thead-dark\">\r\n                    <tr>\r\n                        {isSent ? (<th scope=\"col\">Sender</th>) : (<th scope=\"col\">From</th>)}\r\n                        <th scope=\"col\">Subject</th>\r\n                        <th scope=\"col\">Message</th>\r\n                    </tr>\r\n                </thead>\r\n                    {isSent ? (\r\n                            <tbody>\r\n                                {sentMesages.map((data)=>  \r\n                                <tr key={data.id.toString()}>\r\n                                <th>{data.user.email}</th>\r\n                                <td>{data.subject}</td>\r\n                                <td className=\"d-flex justify-content-between\">\r\n                                    {data.message} <BsX onClick={()=>setmessageForDelete(data.id.toString())} data-toggle=\"modal\" data-target=\"#deleteMessagePrompt\"/>\r\n                                </td>               \r\n\r\n                                </tr>\r\n                                )}\r\n                            </tbody>\r\n                        ) : (\r\n                            <tbody>\r\n                                {recivedMesages.map((data)=>  \r\n                                <tr key={data.id.toString()}>\r\n                                <th>{data.user.email}</th>\r\n                                <td>{data.subject}</td>\r\n                                <td className=\"d-flex justify-content-between\">\r\n                                    {data.message} <BsX onClick={()=>setmessageForDelete(data.id.toString())} data-toggle=\"modal\" data-target=\"#deleteMessagePrompt\"/>\r\n                                </td>\r\n                                </tr>\r\n                                )}\r\n                            </tbody>\r\n                        )}              \r\n            </table>\r\n            )}\r\n                \r\n        </div>\r\n        </div>\r\n        <div className=\"modal fade\" id=\"deleteMessagePrompt\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"deleteMessagePromptLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Are you sure you want to DELETE?</h5>\r\n                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                This will delete the message for both the sender and reciver.\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\">Close</button>\r\n                <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\" onClick={deleteMessage}>Delete</button>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        </div>  \r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Profile;","import React, { useState, useEffect, useRef } from \"react\";\r\nimport userService from \"../services/user.service\"\r\nimport Form from 'react-validation/build/form';\r\nimport Input from 'react-validation/build/input';\r\nimport Textarea from 'react-validation/build/textarea';\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport Select from \"react-validation/build/select\";\r\nimport AuthService from \"../services/auth.service\";\r\n\r\n\r\nconst required = (value) => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nasync function delay(ms) {\r\n  return await new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nconst Compose = () => {\r\n  const form = useRef();\r\n  const checkBtn = useRef();\r\n  const [allUsers, setallUsers] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [emailMessage, setemailMessage] = useState(\"\");\r\n  const [sendTo, setsendTo] = useState(undefined);\r\n  const [subject,setSubject] = useState(\"\");\r\n  const [user,setUser] = useState({})\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    \r\n    async function getAllUsersAndMine() {\r\n      const user = await AuthService.getCurrentUser();\r\n      setUser(user);\r\n      let Users = await userService.getAllUsers();\r\n      setallUsers(Users.data.response);\r\n    }\r\n\r\n    getAllUsersAndMine()\r\n\r\n\r\n  },[]);\r\n\r\n  const handleSendToChange = (e) => {\r\n    const sendTo = e.target.value;\r\n    setsendTo(sendTo);\r\n    console.log(sendTo);\r\n  };\r\n\r\n  const handleSubjectChange = (e) => {\r\n    const subject = e.target.value;\r\n    setSubject(subject);\r\n  }; \r\n\r\n  const handleMessageChange = (e) => {\r\n    const value = e.target.value;\r\n    setemailMessage(value);\r\n  };\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    setMessage(\"\");\r\n    setSuccessful(false);\r\n    setLoading(true);\r\n\r\n    form.current.validateAll();\r\n\r\n    if (checkBtn.current.context._errors.length === 0) {\r\n      try{\r\n        let data = {sender:parseInt(user.id),reciver:parseInt(sendTo),message:emailMessage,subject:subject}\r\n        let response = await userService.composeMessage(data);\r\n        if(response.data.success){\r\n          setMessage(\"The Message sent Successfuly\");\r\n          setLoading(false);\r\n          setSuccessful(true);\r\n          await delay(3000);\r\n          setSuccessful(false);\r\n          setMessage(\"\");\r\n          setsendTo(undefined);\r\n          setSubject(\"\");\r\n          setemailMessage(\"\");\r\n        }else{\r\n          setMessage(response.data.error);\r\n          setSuccessful(false);\r\n        }\r\n      }catch(error){\r\n        const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          \r\n          setSuccessful(false);\r\n          setMessage(resMessage);\r\n          setLoading(false);\r\n      }\r\n      \r\n  }else{\r\n    setLoading(false);\r\n  }\r\n}\r\n\r\n  return (\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            \r\n        </div>\r\n        <div className=\"row\">\r\n\r\n        <Form ref={form} onSubmit={handleSendMessage} className=\"col-md-6 offset-md-3\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"inputAddress\">From</label>\r\n            <Input disabled type=\"text\" value={user.email} className=\"form-control\"/>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"inputAddress2\">To</label>\r\n            <Select value={sendTo} name=\"sendTo\" onChange={handleSendToChange} className=\"form-control\" validations={[required]}>\r\n                <option value> -- select an option -- </option>\r\n                {allUsers.map((user)=>\r\n                  <option key={user.id} value={user.id}>{user.email}</option>\r\n                )}\r\n            </Select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"inputAddress\">Subject</label>\r\n            <Input type=\"text\" value={subject} name=\"subject\" onChange={handleSubjectChange} className=\"form-control\" validations={[required]}/>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"inputAddress\">Message</label>\r\n            <Textarea type=\"text\" value={emailMessage} name=\"emailMessage\" onChange={handleMessageChange} className=\"form-control\" validations={[required]}/>\r\n          </div>\r\n          <div className=\"form-group\">\r\n          <button className=\"btn btn-primary btn-block\" disabled={loading}>\r\n              {loading && (\r\n                <span className=\"spinner-border spinner-border-sm\"></span>\r\n              )}\r\n              <span>Send Message</span>\r\n            </button>\r\n          </div>\r\n          {message && (\r\n            <div className=\"form-group\">\r\n              <div\r\n                className={ successful ? \"alert alert-success\" : \"alert alert-danger\" }\r\n                role=\"alert\"\r\n              >\r\n                {message}\r\n              </div>\r\n            </div>\r\n          )}\r\n          <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n        </Form>\r\n        </div>\r\n        \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Compose;","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AuthService from \"./services/auth.service\";\n\nimport Login from \"./components/login.component\";\nimport Register from \"./components/register.component\";\nimport Profile from \"./components/profile.component\";\nimport Compose from \"./components/compose.component\"\n\nconst App = () => {\n  const [currentUser, setCurrentUser] = useState(undefined);\n\n  useEffect(() => {\n    const user = AuthService.getCurrentUser();\n    \n    if (user) {\n      setCurrentUser(user);\n    }\n  }, []);\n\n  const logOut = () => {\n    AuthService.logout();\n  };\n\n  return (\n    <Router>\n      <div>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          {currentUser ? (\n            <div className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link to={\"/compose\"} className=\"nav-link\">\n                  Compose Message\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link to={\"/profile\"} className=\"nav-link\">\n                  Profile\n                </Link>\n              </li>\n              <li className=\"nav-item \">\n                <a href=\"/\" className=\"nav-link\" onClick={logOut}>\n                  Log Out\n                </a>\n              </li>\n            </div>\n          ) : (\n            <div className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link to={\"/\"} className=\"nav-link\">\n                  Sign In\n                </Link>\n              </li>\n\n              <li className=\"nav-item\">\n                <Link to={\"/register\"} className=\"nav-link\">\n                  Sign Up\n                </Link>\n              </li>\n            </div>\n          )}\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path=\"/\" component={Login} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/profile\" component={Profile} />\n            <Route exact path=\"/compose\" component={Compose} />\n            <Route path=\"*\" component={Login}/>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n  <BrowserRouter>\n      <App /> \n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}