{"version":3,"sources":["services/auth.service.js","components/login.component.js","components/register.component.js","services/auth-header.js","services/user.service.js","components/profile.component.js","components/compose.component.js","App.js","serviceWorker.js","index.js"],"names":["email","full_name","password","axios","post","API_URL","then","response","data","accessToken","localStorage","setItem","JSON","stringify","removeItem","parse","getItem","required","value","className","role","Login","props","form","useRef","checkBtn","useState","setEmail","setPassword","loading","setLoading","message","setMessage","src","alt","onSubmit","e","preventDefault","current","validateAll","context","_errors","length","AuthService","success","history","push","window","location","reload","error","resMessage","toString","ref","htmlFor","type","name","onChange","target","validations","disabled","style","display","validEmail","isEmail","vpassword","vfullName","Register","setfull_name","successful","setSuccessful","onClick","authHeader","user","get","headers","sender","reciver","subject","id","delete","Profile","currentUser","setCurrentUser","recivedMesages","setrecivedMesages","sentMesages","setsentMesages","isSent","setisSent","messageForDelete","setmessageForDelete","noDataToShow","setNoDataToShow","isMessagesEmpty","arr","useEffect","userService","deleteMessage","a","newsentMesages","data-on","data-off","scope","map","key","data-toggle","data-target","tabIndex","aria-labelledby","aria-hidden","data-dismiss","aria-label","delay","ms","Promise","resolve","setTimeout","Compose","allUsers","setallUsers","emailMessage","setemailMessage","undefined","sendTo","setsendTo","setSubject","setUser","Users","getAllUsersAndMine","handleSendMessage","parseInt","console","log","App","to","href","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.eb463da9.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"/auth/\";\r\n\r\nconst login = (email, password) => {\r\n    return axios.post(API_URL + \"login\", {\r\n        email,\r\n        password\r\n      })\r\n      .then(response => {\r\n        if (response.data.accessToken) {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        }\r\n\r\n        return response.data;\r\n      });\r\n}\r\n  \r\nconst logout = () => {\r\n    localStorage.removeItem(\"user\");\r\n  };\r\n  \r\nconst register = (email, full_name, password) => {\r\n    return axios.post(API_URL + \"register\", {\r\n        email,\r\n        full_name,\r\n        password\r\n        });\r\n} \r\nconst getCurrentUser = () => {\r\n    return JSON.parse(localStorage.getItem(\"user\"));\r\n  };\r\n\r\n  export default {\r\n    register,\r\n    login,\r\n    logout,\r\n    getCurrentUser,\r\n  };\r\n  \r\n","import React, { useState, useRef } from \"react\";\r\nimport Form from 'react-validation/build/form';\r\nimport Input from 'react-validation/build/input';\r\nimport CheckButton from \"react-validation/build/button\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nconst required = (value) => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst Login = (props) => {\r\n  const form = useRef();\r\n  const checkBtn = useRef();\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const onChaneEmail = (e) => {\r\n    const email = e.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const onChangePassword = (e) => {\r\n    const password = e.target.value;\r\n    setPassword(password);\r\n  };\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n\r\n    setMessage(\"\");\r\n    setLoading(true);\r\n\r\n    form.current.validateAll();\r\n\r\n    if (checkBtn.current.context._errors.length === 0) {\r\n      AuthService.login(email, password).then(\r\n        (data) => {\r\n        if(data.success){\r\n            props.history.push(\"/profile\");\r\n            window.location.reload();\r\n        }else{\r\n          setMessage(data.error);\r\n          setLoading(false);\r\n        }\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          setLoading(false);\r\n          setMessage(resMessage);\r\n        }\r\n      );\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-md-12\">\r\n      <div className=\"card card-container\">\r\n        <img\r\n          src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n          alt=\"profile-img\"\r\n          className=\"profile-img-card\"\r\n        />\r\n\r\n        <Form onSubmit={handleLogin} ref={form}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email\">Email</label>\r\n            <Input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={onChaneEmail}\r\n              validations={[required]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <Input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={onChangePassword}\r\n              validations={[required]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <button className=\"btn btn-primary btn-block\" disabled={loading}>\r\n              {loading && (\r\n                <span className=\"spinner-border spinner-border-sm\"></span>\r\n              )}\r\n              <span>Sign In</span>\r\n            </button>\r\n          </div>\r\n\r\n          {message && (\r\n            <div className=\"form-group\">\r\n              <div className=\"alert alert-danger\" role=\"alert\">\r\n                {message}\r\n              </div>\r\n            </div>\r\n          )}\r\n          <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;","import React, { useState, useRef } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport { isEmail } from \"validator\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nconst required = (value) => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst validEmail = (value) => {\r\n  if (!isEmail(value)) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This is not a valid email.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nconst vpassword = (value) => {\r\n  if (value.length < 4 || value.length > 40) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        The password must be between 5 and 40 characters.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst vfullName = (value) => {\r\n    if (!value) {\r\n      return (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n          Full Name is required\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\nconst Register = (props) => {\r\n  const form = useRef();\r\n  const checkBtn = useRef();\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [full_name, setfull_name] = useState(\"\");\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n\r\n\r\n  const onChangeEmail = (e) => {\r\n    const email = e.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const onChangePassword = (e) => {\r\n    const password = e.target.value;\r\n    setPassword(password);\r\n  };\r\n\r\n  const onChangeFullName = (e) => {\r\n    const full_name = e.target.value;\r\n    setfull_name(full_name);\r\n  };\r\n\r\n  const handleRegister = (e) => {\r\n    e.preventDefault();\r\n\r\n    setMessage(\"\");\r\n    setSuccessful(false);\r\n\r\n    form.current.validateAll();\r\n\r\n    if (checkBtn.current.context._errors.length === 0) {\r\n      AuthService.register(email,full_name, password).then(\r\n        (response) => {\r\n            if(response.data.success){\r\n                setMessage(\"Account successfully created, now you can sign in\");\r\n                setSuccessful(true);\r\n            }else{\r\n                setMessage(response.data.error);\r\n                setSuccessful(false);\r\n            }\r\n            \r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-md-12\">\r\n      <div className=\"card card-container\">\r\n        <img\r\n          src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n          alt=\"profile-img\"\r\n          className=\"profile-img-card\"\r\n        />\r\n\r\n        <Form onSubmit={handleRegister} ref={form}>\r\n          {!successful && (\r\n            <div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"email\">Email</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  onChange={onChangeEmail}\r\n                  validations={[required, validEmail]}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"password\">Full Name</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"full_name\"\r\n                  value={full_name}\r\n                  onChange={onChangeFullName}\r\n                  validations={[required, vfullName]}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"password\">Password</label>\r\n                <Input\r\n                  type=\"password\"\r\n                  className=\"form-control\"\r\n                  name=\"password\"\r\n                  value={password}\r\n                  onChange={onChangePassword}\r\n                  validations={[required, vpassword]}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <button className=\"btn btn-primary btn-block\">Sign Up</button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {message && (\r\n            <div className=\"form-group\">\r\n              <div\r\n                className={ successful ? \"alert alert-success\" : \"alert alert-danger\" }\r\n                role=\"alert\"\r\n              >\r\n                {message}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {successful && (\r\n              <div className=\"form-group\">\r\n                  <button className=\"btn btn-success btn-block\" onClick={()=>{\r\n                      props.history.push(\"/\");\r\n                      window.location.reload();\r\n                  }}>Go To Sign In</button>\r\n              </div>\r\n          )}\r\n          <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;","export default function authHeader() {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n  \r\n    if (user && user.accessToken) {\r\n      return { 'x-access-token': user.accessToken ,'Content-Type' : 'application/json'};\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n\r\n  ","import axios from 'axios';\r\nimport authHeader from './auth-header';\r\n\r\nconst API_URL = '/messages/';\r\n\r\nconst getAllRecivedMessages = () => {\r\n    return axios.get(API_URL + 'message/', { headers: authHeader()});\r\n}\r\n  \r\nconst getAllSentMessages = () => {\r\n    return axios.get(API_URL + 'message/?filter=sent', { headers: authHeader()});\r\n}\r\n\r\nconst getAllUsers = () => {\r\n    return axios.get(API_URL + 'users/', { headers: authHeader()});\r\n}\r\n  \r\nconst composeMessage = (sender,reciver,message,subject) => {\r\n    return axios.post(API_URL + 'message/',{\r\n        sender: sender,\r\n        reciver: reciver,\r\n        message: message,\r\n        subject: subject\r\n        }, { headers: authHeader()});\r\n}\r\n  \r\nconst deleteMessage = (id) => {\r\n    return axios.delete(API_URL + `message/${id}`, { headers: authHeader()});\r\n}\r\n\r\nexport default {\r\n    getAllRecivedMessages,\r\n    getAllSentMessages,\r\n    getAllUsers,\r\n    composeMessage,\r\n    deleteMessage\r\n}\r\n\r\n  \r\n","import React, { useState, useEffect } from \"react\";\r\nimport AuthService from \"../services/auth.service\";\r\nimport userService from \"../services/user.service\"\r\nimport { BsX } from \"react-icons/bs\";\r\n\r\nconst Profile = (props) => {\r\n\r\nconst [currentUser, setCurrentUser] = useState({});\r\nconst [recivedMesages, setrecivedMesages] = useState([]);\r\nconst [sentMesages, setsentMesages] = useState([]);\r\nconst [loading, setLoading] = useState(false);\r\nconst [isSent, setisSent] = useState(false);\r\nconst [messageForDelete, setmessageForDelete] = useState(\"\");\r\nconst [noDataToShow,setNoDataToShow] = useState(false);\r\n\r\n    const isMessagesEmpty = (arr) =>{\r\n        return  (arr.length === 0) ? setNoDataToShow(true) : setNoDataToShow(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        const user = AuthService.getCurrentUser();\r\n        if (user) {\r\n            setCurrentUser(user);\r\n        }\r\n        if(isSent){\r\n            userService.getAllSentMessages().then(response =>{\r\n                setsentMesages(response.data.response);\r\n                setLoading(false);\r\n                isMessagesEmpty(response.data.response)\r\n            });\r\n        }else{           \r\n            userService.getAllRecivedMessages().then(response =>{\r\n                setrecivedMesages(response.data.response);\r\n                setLoading(false);\r\n                isMessagesEmpty(response.data.response);\r\n            });\r\n        }        \r\n    }, [isSent]);\r\n\r\n    const  deleteMessage = async () =>{\r\n        if(isSent){\r\n            let response = await userService.deleteMessage(messageForDelete);\r\n            let newsentMesages = await userService.getAllSentMessages();\r\n            setsentMesages(newsentMesages.data.response);\r\n            isMessagesEmpty(newsentMesages.data.response);\r\n            setLoading(false);\r\n            setmessageForDelete(\"\");\r\n        }else{\r\n            let response = await userService.deleteMessage(messageForDelete);\r\n            let newsentMesages = await userService.getAllRecivedMessages();\r\n            setrecivedMesages(newsentMesages.data.response);\r\n            isMessagesEmpty(newsentMesages.data.response);\r\n            setLoading(false);\r\n            setmessageForDelete(\"\");\r\n        }\r\n    }\r\n\r\n    const  sendToComposeMessage = () =>{\r\n        props.history.push(\"/compose\");\r\n        window.location.reload();\r\n    }\r\n  \r\n\r\n  return (\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            <div className=\"col-sm-3\">\r\n            <strong>Hello {currentUser.full_name}</strong>\r\n            <label className=\"switch switch-yes-no\">\r\n                <input onClick={()=>setisSent(!isSent)} className=\"switch-input\" type=\"checkbox\" />\r\n                <span className=\"switch-label\" data-on=\"Sent\" data-off=\"Inbox\"></span> \r\n                <span className=\"switch-handle\"></span> \r\n            </label>\r\n            </div>\r\n            <div className=\"col-sm-9\">\r\n            {noDataToShow ? \r\n                (\r\n                    <div className=\"card text-center\">\r\n                        {isSent ? (\r\n                        <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">\r\n                            There aren't any sent messages yet.\r\n                        </h5>\r\n                        <button className=\"btn btn-primary\" onClick={sendToComposeMessage}>Compose Message</button>\r\n                        </div>\r\n                        ):(\r\n                        <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">\r\n                            There are no messages yet.\r\n                        </h5>\r\n                        </div>\r\n                        )}\r\n                    </div>\r\n                ) : (\r\n                <table className=\"table\">\r\n                <thead className=\"thead-dark\">\r\n                    <tr>\r\n                        {isSent ? (<th scope=\"col\">Sender</th>) : (<th scope=\"col\">From</th>)}\r\n                        <th scope=\"col\">Subject</th>\r\n                        <th scope=\"col\">Message</th>\r\n                    </tr>\r\n                </thead>\r\n                    {isSent ? (\r\n                            <tbody>\r\n                                {sentMesages.map((data)=>  \r\n                                <tr key={data.id.toString()}>\r\n                                <th>{data.user.email}</th>\r\n                                <td>{data.subject}</td>\r\n                                <td className=\"d-flex justify-content-between\">\r\n                                    {data.message} <BsX onClick={()=>setmessageForDelete(data.id.toString())} data-toggle=\"modal\" data-target=\"#deleteMessagePrompt\"/>\r\n                                </td>               \r\n\r\n                                </tr>\r\n                                )}\r\n                            </tbody>\r\n                        ) : (\r\n                            <tbody>\r\n                                {recivedMesages.map((data)=>  \r\n                                <tr key={data.id.toString()}>\r\n                                <th>{data.user.email}</th>\r\n                                <td>{data.subject}</td>\r\n                                <td className=\"d-flex justify-content-between\">\r\n                                    {data.message} <BsX onClick={()=>setmessageForDelete(data.id.toString())} data-toggle=\"modal\" data-target=\"#deleteMessagePrompt\"/>\r\n                                </td>\r\n                                </tr>\r\n                                )}\r\n                            </tbody>\r\n                        )}              \r\n            </table>\r\n            )}\r\n                \r\n        </div>\r\n        </div>\r\n        <div className=\"modal fade\" id=\"deleteMessagePrompt\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"deleteMessagePromptLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Are you sure you want to DELETE?</h5>\r\n                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                This will delete the message for both the sender and reciver.\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\">Close</button>\r\n                <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\" onClick={deleteMessage}>Delete</button>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        </div>  \r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Profile;","import React, { useState, useEffect, useRef } from \"react\";\r\nimport userService from \"../services/user.service\"\r\nimport Form from 'react-validation/build/form';\r\nimport Input from 'react-validation/build/input';\r\nimport Textarea from 'react-validation/build/textarea';\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport Select from \"react-validation/build/select\";\r\nimport AuthService from \"../services/auth.service\";\r\n\r\n\r\nconst required = (value) => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nasync function delay(ms) {\r\n  return await new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nconst Compose = () => {\r\n  const form = useRef();\r\n  const checkBtn = useRef();\r\n  const [allUsers, setallUsers] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [emailMessage, setemailMessage] = useState(\"\");\r\n  const [sendTo, setsendTo] = useState(undefined);\r\n  const [subject,setSubject] = useState(\"\");\r\n  const [user,setUser] = useState({})\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    \r\n    async function getAllUsersAndMine() {\r\n      const user = await AuthService.getCurrentUser();\r\n      setUser(user);\r\n      let Users = await userService.getAllUsers();\r\n      setallUsers(Users.data.response);\r\n    }\r\n\r\n    getAllUsersAndMine()\r\n\r\n\r\n  },[]);\r\n\r\n  const handleSendToChange = (e) => {\r\n    const sendTo = e.target.value;\r\n    setsendTo(sendTo);\r\n    console.log(sendTo);\r\n  };\r\n\r\n  const handleSubjectChange = (e) => {\r\n    const subject = e.target.value;\r\n    setSubject(subject);\r\n  }; \r\n\r\n  const handleMessageChange = (e) => {\r\n    const value = e.target.value;\r\n    setemailMessage(value);\r\n  };\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    setMessage(\"\");\r\n    setSuccessful(false);\r\n    setLoading(true);\r\n\r\n    form.current.validateAll();\r\n\r\n    if (checkBtn.current.context._errors.length === 0) {\r\n      try{\r\n        let data = {sender:parseInt(user.id),reciver:parseInt(sendTo),message:emailMessage,subject:subject}\r\n        let response = await userService.composeMessage(data);\r\n        if(response.data.success){\r\n          setMessage(\"The Message sent Successfuly\");\r\n          setLoading(false);\r\n          setSuccessful(true);\r\n          await delay(3000);\r\n          setSuccessful(false);\r\n          setMessage(\"\");\r\n          setsendTo(undefined);\r\n          setSubject(\"\");\r\n          setemailMessage(\"\");\r\n        }else{\r\n          setMessage(response.data.error);\r\n          setSuccessful(false);\r\n        }\r\n      }catch(error){\r\n        const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          \r\n          setSuccessful(false);\r\n          setMessage(resMessage);\r\n          setLoading(false);\r\n      }\r\n      \r\n  }else{\r\n    setLoading(false);\r\n  }\r\n}\r\n\r\n  return (\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            \r\n        </div>\r\n        <div className=\"row\">\r\n\r\n        <Form ref={form} onSubmit={handleSendMessage} className=\"col-md-6 offset-md-3\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"inputAddress\">From</label>\r\n            <Input disabled type=\"text\" value={user.email} className=\"form-control\"/>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"inputAddress2\">To</label>\r\n            <Select value={sendTo} name=\"sendTo\" onChange={handleSendToChange} className=\"form-control\" validations={[required]}>\r\n                <option value> -- select an option -- </option>\r\n                {allUsers.map((user)=>\r\n                  <option key={user.id} value={user.id}>{user.email}</option>\r\n                )}\r\n            </Select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"inputAddress\">Subject</label>\r\n            <Input type=\"text\" value={subject} name=\"subject\" onChange={handleSubjectChange} className=\"form-control\" validations={[required]}/>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"inputAddress\">Message</label>\r\n            <Textarea type=\"text\" value={emailMessage} name=\"emailMessage\" onChange={handleMessageChange} className=\"form-control\" validations={[required]}/>\r\n          </div>\r\n          <div className=\"form-group\">\r\n          <button className=\"btn btn-primary btn-block\" disabled={loading}>\r\n              {loading && (\r\n                <span className=\"spinner-border spinner-border-sm\"></span>\r\n              )}\r\n              <span>Send Message</span>\r\n            </button>\r\n          </div>\r\n          {message && (\r\n            <div className=\"form-group\">\r\n              <div\r\n                className={ successful ? \"alert alert-success\" : \"alert alert-danger\" }\r\n                role=\"alert\"\r\n              >\r\n                {message}\r\n              </div>\r\n            </div>\r\n          )}\r\n          <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n        </Form>\r\n        </div>\r\n        \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Compose;","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AuthService from \"./services/auth.service\";\n\nimport Login from \"./components/login.component\";\nimport Register from \"./components/register.component\";\nimport Profile from \"./components/profile.component\";\nimport Compose from \"./components/compose.component\"\n\nconst App = () => {\n  const [currentUser, setCurrentUser] = useState(undefined);\n\n  useEffect(() => {\n    const user = AuthService.getCurrentUser();\n    \n    if (user) {\n      setCurrentUser(user);\n    }\n  }, []);\n\n  const logOut = () => {\n    AuthService.logout();\n  };\n\n  return (\n    <Router>\n      <div>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          {currentUser ? (\n            <div className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link to={\"/compose\"} className=\"nav-link\">\n                  Compose Message\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link to={\"/profile\"} className=\"nav-link\">\n                  Profile\n                </Link>\n              </li>\n              <li className=\"nav-item \">\n                <a href=\"/\" className=\"nav-link\" onClick={logOut}>\n                  Log Out\n                </a>\n              </li>\n            </div>\n          ) : (\n            <div className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link to={\"/\"} className=\"nav-link\">\n                  Sign In\n                </Link>\n              </li>\n\n              <li className=\"nav-item\">\n                <Link to={\"/register\"} className=\"nav-link\">\n                  Sign Up\n                </Link>\n              </li>\n            </div>\n          )}\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path=\"/\" component={Login} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/profile\" component={Profile} />\n            <Route exact path=\"/compose\" component={Compose} />\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n  <BrowserRouter>\n      <App /> \n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}